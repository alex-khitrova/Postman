{
	"info": {
		"_postman_id": "ce3409f1-f431-4b4c-bd19-a8b5456b217e",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20732089"
	},
	"item": [
		{
			"name": "first/1-3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"   let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name ввести вручную)\r",
							"    let name = jsonData.name;\r",
							"    let exp_name = \"Alex\";\r",
							"    console.log(exp_name)\r",
							"    console.log(name)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(exp_name).to.eql(name);\r",
							"});\r",
							"//5.Проверить, что age в ответе равно age s request (age ввести вручную)\r",
							"   let age = +jsonData.age;\r",
							"   let check_age = 32;\r",
							"   console.log(check_age)\r",
							"   console.log(age)\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(check_age).to.eql(age);\r",
							"});\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary ввести вручную.)\r",
							"   let salary = jsonData.salary;\r",
							"   let check_salary = 1000;\r",
							"   console.log(salary)\r",
							"   console.log(check_salary)\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(check_salary).to.eql(salary)\r",
							"});\r",
							"//7.Спарсить request.\r",
							"    let req = request.data;\r",
							"    console.log(req)\r",
							"//8.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    let name1 = jsonData.name;\r",
							"    let check_name1 = req.name;\r",
							"    console.log(check_name1)\r",
							"    console.log(name1)\r",
							"pm.test(\"check_name1\", function () {\r",
							"    pm.expect(name1).to.eql(check_name1);\r",
							"});\r",
							"//9.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    let age1 = jsonData.age;\r",
							"    let check_age1 = req.age;\r",
							"    console.log(check_age1)\r",
							"    console.log(age1)\r",
							"pm.test(\"check_age1\", function () {\r",
							"    pm.expect(age1).to.eql(check_age1);\r",
							"});\r",
							"//10.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    let check_salary1 = jsonData.salary;\r",
							"    let salary1 = +req.salary \r",
							"    console.log(check_salary1)\r",
							"    console.log(salary1)\r",
							"pm.test(\"check_salary1\", function () {\r",
							"    pm.expect(salary1).to.eql(check_salary1);\r",
							"});\r",
							"//11.Вывести в консоль параметр family из response.\r",
							"   let check_family  = jsonData.family;\r",
							"   console.log(check_family)\r",
							"//12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"   let check_salary_5_year = jsonData.salary*4;\r",
							"   let salary_5_year = jsonData.family.u_salary_1_5_year;\r",
							"   console.log(check_salary_5_year)\r",
							"   console.log(salary_5_year)\r",
							"pm.test(\"check_salary_5_year\", function () {\r",
							"    pm.expect(check_salary_5_year).to.eql(salary_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    let jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"    let req = pm.request.url.query.all();\r",
							"console.log(req)   \r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    let check_name = req[0].value;\r",
							"    let name = jsonData.name;\r",
							"console.log(check_name);\r",
							"console.log(name);\r",
							"pm.test(\"check_name\", function () { pm.expect(check_name).to.eql(name);\r",
							"});  \r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    let check_age = req[1].value;\r",
							"    let age = jsonData.age;\r",
							"console.log(check_age);\r",
							"console.log(age);\r",
							"pm.test(\"check_age\", function () { pm.expect(check_age).to.eql(age);\r",
							"});\r",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    let check_salary = +req[2].value;\r",
							"    let salary = jsonData.salary;\r",
							"console.log(check_salary);\r",
							"console.log(salary);\r",
							"pm.test(\"check_salary\", function () {pm.expect(check_salary).to.eql(salary);\r",
							"});\r",
							"//8.Вывести в консоль параметр family из response.\r",
							"    let family = jsonData.family;\r",
							"console.log(family)\r",
							"//9.Проверить, что у параметра dog есть параметры name.\r",
							"    let dog = jsonData.family.pets.dog;\r",
							"console.log(dog)\r",
							"    //if(Object.keys(dog).includes('name')){console.log('yes')}\r",
							"    //else{console.log('no')} \r",
							"pm.test(\"dog_name\",() => {\r",
							"    pm.expect(dog).to.include.key('name');\r",
							"});\r",
							"//10.Проверить, что у параметра dog есть параметры age.\r",
							"    //if(Object.keys(dog).includes('age')){console.log('yes')}\r",
							"    //else{console.log('no')} \r",
							"pm.test(\"dog_age\",() => {\r",
							"    pm.expect(dog).to.include.key('age');\r",
							"});\r",
							"//11.Проверить, что параметр name имеет значение Luky.\r",
							"    let dog_name = jsonData.family.pets.dog.name;\r",
							"   // if(dog_name === 'Luky'){console.log('yes')}\r",
							"   // else{console.log('no')} \r",
							"pm.test(\"check_dog_name\", function () {\r",
							"    pm.expect(\"Luky\").to.eql(dog_name);\r",
							"});\r",
							"//12.Проверить, что параметр age имеет значение 4.\r",
							"    let dog_age = jsonData.family.pets.dog.age;\r",
							"    //if(dog_age === 4){console.log('yes')}\r",
							"    // else{console.log('no')} \r",
							"pm.test(\"chek_dog_age\", function () {\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				},
				"description": "EP_5\r\nMethod: GET\r\nEndPoint: /object_info_3\r\nrequest url params: \r\n name: str\r\n age: int\r\n salary: int\r\n\r\nresponse: \r\n{'name': name,\r\n          'age': age,\r\n          'salary': salary,\r\n          'family': {'children': [['Alex', 24], ['Kate', 12]],\r\n                     'pets': {'cat':{'name':'Sunny',\r\n                                     'age': 3},\r\n                              'dog':{'name':'Luky',\r\n                                     'age': 4}},\r\n                     'u_salary_1_5_year': salary * 4}\r\n          }"
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    let jsonData = pm.response.json();\r",
							"    console.log(jsonData)\r",
							"    let req = pm.request.url.query.all();\r",
							"    console.log(req)\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    let check_name = req[0].value;\r",
							"    let name = jsonData.name;\r",
							"    console.log(check_name);\r",
							"    console.log(name);\r",
							"pm.test(\"check_name\", function () {pm.expect(check_name).to.eql(name);\r",
							"});\r",
							"//6.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    let check_age = +req[1].value;\r",
							"    let age = jsonData.age;\r",
							"    console.log(check_age);\r",
							"    console.log(age);\r",
							"pm.test(\"check_age\", function () {pm.expect(check_age).to.eql(age);\r",
							"});\r",
							"//7.Вывести в консоль параметр salary из request.\r",
							"   let salary_request = req[2].value;\r",
							"    console.log(salary_request)\r",
							"//8.Вывести в консоль параметр salary из response.\r",
							"    let salary_response = jsonData.salary;\r",
							"    console.log(salary_response)\r",
							"//9.Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    let res_salary_0 = jsonData.salary[0];\r",
							"    console.log(res_salary_0)\r",
							"//10.Вывести в консоль 1-й элемент параметра salary из response.\r",
							"    let res_salary_1 = jsonData.salary[1];\r",
							"    console.log(res_salary_1)\r",
							"//11.Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    let res_salary_2 = jsonData.salary[2];\r",
							"    console.log(res_salary_2)\r",
							"//12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.) \r",
							"    let salary_0 = jsonData.salary[0];\r",
							"    let check_salary_0 = +req[2].value;\r",
							"    console.log(salary_0)\r",
							"    console.log(check_salary_0)\r",
							"pm.test(\"check_salary_0\", function () {\r",
							"    pm.expect(check_salary_0).to.eql(salary_0);\r",
							"});\r",
							"//13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    let salary_1 = +jsonData.salary[1];\r",
							"    let check_salary_1 = req[2].value*2;\r",
							"    console.log(salary_1)\r",
							"    console.log(check_salary_1)\r",
							"pm.test(\"check_salary_1\", function () {\r",
							"    pm.expect(check_salary_1).to.eql(salary_1);\r",
							"});\r",
							"//14.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    let salary_2 = +jsonData.salary[2];\r",
							"    let check_salary_2 = req[2].value*3;\r",
							"    console.log(salary_2)\r",
							"    console.log(check_salary_2)\r",
							"pm.test(\"check_salary_2\", function () {\r",
							"    pm.expect(check_salary_2).to.eql(salary_2);\r",
							"});\r",
							"//15.Создать в окружении переменную name\r",
							"    let user_name = jsonData.name;\r",
							"    console.log(user_name)\r",
							"pm.environment.set(\"name\", user_name);\r",
							"//16.Создать в окружении переменную age\r",
							"    let user_age = jsonData.age;\r",
							"    console.log(user_age)\r",
							"pm.environment.set(\"age\", user_age);\r",
							"//17.Создать в окружении переменную salary\r",
							"    let user_salary= jsonData.salary[0];\r",
							"    console.log(user_salary)\r",
							"pm.environment.set(\"salary\", user_salary);\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"    let arr = jsonData.salary;\r",
							"    for (let i = 0; i <= arr.length - 1; i++)\r",
							"    console.log(arr[i])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=32&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"//1.Вставить параметр salary из окружения в request\r",
							"//2.Вставить параметр age из окружения в age\r",
							"//3.Вставить параметр name из окружения в name\r",
							"//4.Отправить запрос.\r",
							"//5.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6.Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"    console.log(jsonData)\r",
							"//7.Спарсить request.\r",
							"    let req = request.data;\r",
							"    console.log(req)\r",
							"//8.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check_start_qa_salary\",() => {\r",
							"    pm.expect(jsonData).to.include.key('start_qa_salary');\r",
							"});\r",
							"//9.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\",() => {\r",
							"    pm.expect(jsonData).to.include.key('qa_salary_after_6_months');\r",
							"});\r",
							"//10.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\",() => {\r",
							"    pm.expect(jsonData).to.include.key('qa_salary_after_12_months');\r",
							"});\r",
							"//11.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\",() => {\r",
							"    pm.expect(jsonData).to.include.key('qa_salary_after_1.5_year');\r",
							"});\r",
							"//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\",() => {\r",
							"    pm.expect(jsonData).to.include.key('qa_salary_after_3.5_years');\r",
							"});\r",
							"//13.Проверить, что json response имеет параметр person\r",
							"pm.test(\"check_person\",() => {\r",
							"    pm.expect(jsonData).to.include.key('person');\r",
							"});\r",
							"//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    let check_salary = +req.salary;\r",
							"    let check_start_qa_salary = jsonData.start_qa_salary;\r",
							"pm.test(\"check_start_qa_salary\", function () {\r",
							"    pm.expect(check_start_qa_salary).to.eql(check_salary);\r",
							"});\r",
							"//15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    let check_salary1 = +req.salary*2;\r",
							"    let check_qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"pm.test(\"check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(check_qa_salary_after_6_months).to.eql(check_salary1);\r",
							"});\r",
							"//16.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"    let check_salary2 = +req.salary*2.7;\r",
							"    let check_qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"pm.test(\"check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(check_qa_salary_after_12_months).to.eql(check_salary2);\r",
							"});\r",
							"//17.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    let check_salary3 = +req.salary*3.3;\r",
							"    let check_qa_salary_after_1_and_half_year = jsonData['qa_salary_after_1.5_year'];\r",
							"pm.test(\"qa_salary_after_1_and_half_year\", function () {\r",
							"    pm.expect(check_qa_salary_after_1_and_half_year ).to.eql(check_salary3);\r",
							"});\r",
							"//18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"    let check_salary4 = +req.salary*3.8;\r",
							"    let check_qa_salary_after_3_and_half_years = jsonData['qa_salary_after_3.5_years'];\r",
							"    console.log(check_qa_salary_after_3_and_half_years)\r",
							"pm.test(\"check_qa_salary_after_3.5_years\", function () {\r",
							"  pm.expect(check_qa_salary_after_3_and_half_years).to.eql(check_salary4);\r",
							"});\r",
							"//19.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    let check_first_param_u_name = +req.salary;\r",
							"    let salary_u_name = jsonData.person.u_name[1];\r",
							"    console.log(check_first_param_u_name)\r",
							"    console.log(salary_u_name)\r",
							"pm.test(\"check_first_param_u_name\", function () {\r",
							"  pm.expect(check_first_param_u_name).to.eql(salary_u_name);\r",
							"});\r",
							"//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    let check_age_u_name = +req.age;\r",
							"    let age_u_name = jsonData.person.u_age;\r",
							"    console.log(check_age_u_name)\r",
							"    console.log(age_u_name)\r",
							"pm.test(\"check_age_u_name\", function () {\r",
							"    pm.expect(check_age_u_name).to.eql(age_u_name);\r",
							"});\r",
							"//21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    let check_salary5 = +req.salary*4.2;\r",
							"    let check_u_salary_5_years = jsonData.person.u_salary_5_years;\r",
							"pm.test(\"check_u_salary_5_years\", function () {\r",
							"    pm.expect(check_u_salary_5_years).to.eql(check_salary5);\r",
							"});\r",
							"//22.Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let keys in jsonData.person)\r",
							"console.log(keys,jsonData.person[keys])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}